/**********************************************************************************************************************************************************
 * 
                             _                           _     _____                          _       _     
                            (_)                         | |   |  __ \                        (_)     | |    
                             _   _ __    _ __    _   _  | |_  | |__) |   __ _   ___   _ __    _      | |__  
                            | | | '_ \  | '_ \  | | | | | __| |  _  /   / _` | / __| | '_ \  | |     | '_ \ 
                            | | | | | | | |_) | | |_| | | |_  | | \ \  | (_| | \__ \ | |_) | | |  _  | | | |
                            |_| |_| |_| | .__/   \__,_|  \__| |_|  \_\  \__,_| |___/ | .__/  |_| (_) |_| |_|
                                        | |                                          | |                    
                                        |_|                                          |_|
 * 
 ***********************************************************************************************************************************************************
 **********************************************************************************************************************************************************/

 #ifndef INPUT_RASPI_H
 #define INPUT_RASPI_H

#include <semaphore.h>
#include "../../back/spaceLib/spaceLib.h"
/*******************************************************************************************************************************************
 * 
                                 _____   _                          _           ___           _              
                                |_   _| (_)  _ __   ___   ___    __| |  ___    |   \   __ _  | |_   ___   ___
                                  | |   | | | '_ \ / _ \ (_-<   / _` | / -_)   | |) | / _` | |  _| / _ \ (_-<
                                  |_|   |_| | .__/ \___/ /__/   \__,_| \___|   |___/  \__,_|  \__| \___/ /__/
                                            |_|                                                          
 * 
 ******************************************************************************************************************************************/
typedef struct{

    keys_t* KEYS;
    unsigned char* exitStatus;
}argInputRPI_t;

/*******************************************************************************************************************************************
*******************************************************************************************************************************************/


/*******************************************************************************************************************************************
 * 
                                 ___               _           _     _                   
                                | _ \  _ _   ___  | |_   ___  | |_  (_)  _ __   ___   ___
                                |  _/ | '_| / _ \ |  _| / _ \ |  _| | | | '_ \ / _ \ (_-<
                                |_|   |_|   \___/  \__| \___/  \__| |_| | .__/ \___/ /__/
                                                                        |_|                                                            
 * 
 ******************************************************************************************************************************************/

void* inputRPIThread(void* argInputRPI);  //Se encarga de leer el input durante la ejecucion del juego.

void joyInit(void);
/*******************************************************************************************************************************************
*******************************************************************************************************************************************/


/*******************************************************************************************************************************************
 * 
                                     ___                     _                   _              
                                    / __|  ___   _ _    ___ | |_   __ _   _ _   | |_   ___   ___
                                   | (__  / _ \ | ' \  (_-< |  _| / _` | | ' \  |  _| / -_) (_-<
                                    \___| \___/ |_||_| /__/  \__| \__,_| |_||_|  \__| \___| /__/
                                                                                                                                                            
 * 
 ******************************************************************************************************************************************/

//*************LIMITES DEL JOYSTICK
#define JOY_ACTIVE_NEG -50      //Coordenada en X a partir de la cual se detecta que se activo el joystick.
#define JOY_ACTIVE_NEG_Y -100      //Coordenada en X a partir de la cual se detecta que se activo el joystick.
#define JOY_ACTIVE_POS  50

#define VEL_USR 5   //Determina que tan rapido podra mover la nave del usuario. La conversion es: si velUsuario = 1, entonces la nave se podra mover 
                    //cada 10mS. Para ejecutar que la nave se pueda mover cada 1s, velUsuario debe valer 100. Por defecto se mueve cada medio segundo.

#define U_SEC2M_SEC 1000    //Conversion de micro segundos a milisegundos.

/*******************************************************************************************************************************************
*******************************************************************************************************************************************/


/*******************************************************************************************************************************************
 * 
                                             ___         _                           
                                            | __| __ __ | |_   ___   _ _   _ _    ___
                                            | _|  \ \ / |  _| / -_) | '_| | ' \  (_-<
                                            |___| /_\_\  \__| \___| |_|   |_||_| /__/                                                                                                                      
 * 
 ******************************************************************************************************************************************/
extern sem_t SEM_DRIVER;
/*******************************************************************************************************************************************
*******************************************************************************************************************************************/


/*******************************************************************************************************************************************
 * 
                                             __  __                              
                                            |  \/  |  __ _   __   _ _   ___   ___
                                            | |\/| | / _` | / _| | '_| / _ \ (_-<
                                            |_|  |_| \__,_| \__| |_|   \___/ /__/                                                    
 * 
 ******************************************************************************************************************************************/

#define NAVE_USUARIO ((argUpdateInputGame_t*)argUpdateInputGame) -> naveUsuario //Acceso a la nave del usuario.

#define MOOVE_NAVE_USUARIO ((argUpdateInputGame_t*)argUpdateInputGame) -> moveNaveUsuario  //Acceso al callback que mueve la nave del usuario.

#define THREAD_DISPLAY_PAUSA ((argUpdateInputGame_t*)argUpdateInputGame) -> threadDisplayPausa  //Acceso al callback que mueve la nave del usuario.
/*******************************************************************************************************************************************
*******************************************************************************************************************************************/

 #endif//inputRaspi.h
